// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Scalingo/go-scalingo/v7 (interfaces: CollaboratorsService)

// Package scalingomock is a generated GoMock package.
package scalingomock

import (
	context "context"
	reflect "reflect"

	v7 "github.com/Scalingo/go-scalingo/v7"
	gomock "github.com/golang/mock/gomock"
)

// MockCollaboratorsService is a mock of CollaboratorsService interface.
type MockCollaboratorsService struct {
	ctrl     *gomock.Controller
	recorder *MockCollaboratorsServiceMockRecorder
}

// MockCollaboratorsServiceMockRecorder is the mock recorder for MockCollaboratorsService.
type MockCollaboratorsServiceMockRecorder struct {
	mock *MockCollaboratorsService
}

// NewMockCollaboratorsService creates a new mock instance.
func NewMockCollaboratorsService(ctrl *gomock.Controller) *MockCollaboratorsService {
	mock := &MockCollaboratorsService{ctrl: ctrl}
	mock.recorder = &MockCollaboratorsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollaboratorsService) EXPECT() *MockCollaboratorsServiceMockRecorder {
	return m.recorder
}

// CollaboratorAdd mocks base method.
func (m *MockCollaboratorsService) CollaboratorAdd(arg0 context.Context, arg1, arg2 string, arg3 bool) (v7.Collaborator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollaboratorAdd", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(v7.Collaborator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollaboratorAdd indicates an expected call of CollaboratorAdd.
func (mr *MockCollaboratorsServiceMockRecorder) CollaboratorAdd(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollaboratorAdd", reflect.TypeOf((*MockCollaboratorsService)(nil).CollaboratorAdd), arg0, arg1, arg2, arg3)
}

// CollaboratorRemove mocks base method.
func (m *MockCollaboratorsService) CollaboratorRemove(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollaboratorRemove", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CollaboratorRemove indicates an expected call of CollaboratorRemove.
func (mr *MockCollaboratorsServiceMockRecorder) CollaboratorRemove(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollaboratorRemove", reflect.TypeOf((*MockCollaboratorsService)(nil).CollaboratorRemove), arg0, arg1, arg2)
}

// CollaboratorsList mocks base method.
func (m *MockCollaboratorsService) CollaboratorsList(arg0 context.Context, arg1 string) ([]v7.Collaborator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollaboratorsList", arg0, arg1)
	ret0, _ := ret[0].([]v7.Collaborator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollaboratorsList indicates an expected call of CollaboratorsList.
func (mr *MockCollaboratorsServiceMockRecorder) CollaboratorsList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollaboratorsList", reflect.TypeOf((*MockCollaboratorsService)(nil).CollaboratorsList), arg0, arg1)
}
