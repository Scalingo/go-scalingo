// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Scalingo/go-scalingo/v7 (interfaces: AddonsService)

// Package scalingomock is a generated GoMock package.
package scalingomock

import (
	context "context"
	reflect "reflect"

	scalingo "github.com/Scalingo/go-scalingo/v7"
	gomock "github.com/golang/mock/gomock"
)

// MockAddonsService is a mock of AddonsService interface.
type MockAddonsService struct {
	ctrl     *gomock.Controller
	recorder *MockAddonsServiceMockRecorder
}

// MockAddonsServiceMockRecorder is the mock recorder for MockAddonsService.
type MockAddonsServiceMockRecorder struct {
	mock *MockAddonsService
}

// NewMockAddonsService creates a new mock instance.
func NewMockAddonsService(ctrl *gomock.Controller) *MockAddonsService {
	mock := &MockAddonsService{ctrl: ctrl}
	mock.recorder = &MockAddonsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddonsService) EXPECT() *MockAddonsServiceMockRecorder {
	return m.recorder
}

// AddonDestroy mocks base method.
func (m *MockAddonsService) AddonDestroy(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddonDestroy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddonDestroy indicates an expected call of AddonDestroy.
func (mr *MockAddonsServiceMockRecorder) AddonDestroy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddonDestroy", reflect.TypeOf((*MockAddonsService)(nil).AddonDestroy), arg0, arg1, arg2)
}

// AddonLogsArchives mocks base method.
func (m *MockAddonsService) AddonLogsArchives(arg0 context.Context, arg1, arg2 string, arg3 int) (*scalingo.LogsArchivesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddonLogsArchives", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*scalingo.LogsArchivesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddonLogsArchives indicates an expected call of AddonLogsArchives.
func (mr *MockAddonsServiceMockRecorder) AddonLogsArchives(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddonLogsArchives", reflect.TypeOf((*MockAddonsService)(nil).AddonLogsArchives), arg0, arg1, arg2, arg3)
}

// AddonLogsURL mocks base method.
func (m *MockAddonsService) AddonLogsURL(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddonLogsURL", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddonLogsURL indicates an expected call of AddonLogsURL.
func (mr *MockAddonsServiceMockRecorder) AddonLogsURL(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddonLogsURL", reflect.TypeOf((*MockAddonsService)(nil).AddonLogsURL), arg0, arg1, arg2)
}

// AddonProvision mocks base method.
func (m *MockAddonsService) AddonProvision(arg0 context.Context, arg1 string, arg2 scalingo.AddonProvisionParams) (scalingo.AddonRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddonProvision", arg0, arg1, arg2)
	ret0, _ := ret[0].(scalingo.AddonRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddonProvision indicates an expected call of AddonProvision.
func (mr *MockAddonsServiceMockRecorder) AddonProvision(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddonProvision", reflect.TypeOf((*MockAddonsService)(nil).AddonProvision), arg0, arg1, arg2)
}

// AddonToken mocks base method.
func (m *MockAddonsService) AddonToken(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddonToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddonToken indicates an expected call of AddonToken.
func (mr *MockAddonsServiceMockRecorder) AddonToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddonToken", reflect.TypeOf((*MockAddonsService)(nil).AddonToken), arg0, arg1, arg2)
}

// AddonUpgrade mocks base method.
func (m *MockAddonsService) AddonUpgrade(arg0 context.Context, arg1, arg2 string, arg3 scalingo.AddonUpgradeParams) (scalingo.AddonRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddonUpgrade", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(scalingo.AddonRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddonUpgrade indicates an expected call of AddonUpgrade.
func (mr *MockAddonsServiceMockRecorder) AddonUpgrade(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddonUpgrade", reflect.TypeOf((*MockAddonsService)(nil).AddonUpgrade), arg0, arg1, arg2, arg3)
}

// AddonsList mocks base method.
func (m *MockAddonsService) AddonsList(arg0 context.Context, arg1 string) ([]*scalingo.Addon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddonsList", arg0, arg1)
	ret0, _ := ret[0].([]*scalingo.Addon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddonsList indicates an expected call of AddonsList.
func (mr *MockAddonsServiceMockRecorder) AddonsList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddonsList", reflect.TypeOf((*MockAddonsService)(nil).AddonsList), arg0, arg1)
}
