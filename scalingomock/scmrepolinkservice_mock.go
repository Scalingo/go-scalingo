// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Scalingo/go-scalingo/v7 (interfaces: SCMRepoLinkService)

// Package scalingomock is a generated GoMock package.
package scalingomock

import (
	context "context"
	reflect "reflect"

	scalingo "github.com/Scalingo/go-scalingo/v7"
	gomock "github.com/golang/mock/gomock"
)

// MockSCMRepoLinkService is a mock of SCMRepoLinkService interface.
type MockSCMRepoLinkService struct {
	ctrl     *gomock.Controller
	recorder *MockSCMRepoLinkServiceMockRecorder
}

// MockSCMRepoLinkServiceMockRecorder is the mock recorder for MockSCMRepoLinkService.
type MockSCMRepoLinkServiceMockRecorder struct {
	mock *MockSCMRepoLinkService
}

// NewMockSCMRepoLinkService creates a new mock instance.
func NewMockSCMRepoLinkService(ctrl *gomock.Controller) *MockSCMRepoLinkService {
	mock := &MockSCMRepoLinkService{ctrl: ctrl}
	mock.recorder = &MockSCMRepoLinkServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSCMRepoLinkService) EXPECT() *MockSCMRepoLinkServiceMockRecorder {
	return m.recorder
}

// SCMRepoLinkCreate mocks base method.
func (m *MockSCMRepoLinkService) SCMRepoLinkCreate(arg0 context.Context, arg1 string, arg2 scalingo.SCMRepoLinkCreateParams) (*scalingo.SCMRepoLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SCMRepoLinkCreate", arg0, arg1, arg2)
	ret0, _ := ret[0].(*scalingo.SCMRepoLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SCMRepoLinkCreate indicates an expected call of SCMRepoLinkCreate.
func (mr *MockSCMRepoLinkServiceMockRecorder) SCMRepoLinkCreate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SCMRepoLinkCreate", reflect.TypeOf((*MockSCMRepoLinkService)(nil).SCMRepoLinkCreate), arg0, arg1, arg2)
}

// SCMRepoLinkDelete mocks base method.
func (m *MockSCMRepoLinkService) SCMRepoLinkDelete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SCMRepoLinkDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SCMRepoLinkDelete indicates an expected call of SCMRepoLinkDelete.
func (mr *MockSCMRepoLinkServiceMockRecorder) SCMRepoLinkDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SCMRepoLinkDelete", reflect.TypeOf((*MockSCMRepoLinkService)(nil).SCMRepoLinkDelete), arg0, arg1)
}

// SCMRepoLinkDeployments mocks base method.
func (m *MockSCMRepoLinkService) SCMRepoLinkDeployments(arg0 context.Context, arg1 string) ([]*scalingo.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SCMRepoLinkDeployments", arg0, arg1)
	ret0, _ := ret[0].([]*scalingo.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SCMRepoLinkDeployments indicates an expected call of SCMRepoLinkDeployments.
func (mr *MockSCMRepoLinkServiceMockRecorder) SCMRepoLinkDeployments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SCMRepoLinkDeployments", reflect.TypeOf((*MockSCMRepoLinkService)(nil).SCMRepoLinkDeployments), arg0, arg1)
}

// SCMRepoLinkList mocks base method.
func (m *MockSCMRepoLinkService) SCMRepoLinkList(arg0 context.Context, arg1 scalingo.PaginationOpts) ([]*scalingo.SCMRepoLink, scalingo.PaginationMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SCMRepoLinkList", arg0, arg1)
	ret0, _ := ret[0].([]*scalingo.SCMRepoLink)
	ret1, _ := ret[1].(scalingo.PaginationMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SCMRepoLinkList indicates an expected call of SCMRepoLinkList.
func (mr *MockSCMRepoLinkServiceMockRecorder) SCMRepoLinkList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SCMRepoLinkList", reflect.TypeOf((*MockSCMRepoLinkService)(nil).SCMRepoLinkList), arg0, arg1)
}

// SCMRepoLinkManualDeploy mocks base method.
func (m *MockSCMRepoLinkService) SCMRepoLinkManualDeploy(arg0 context.Context, arg1, arg2 string) (*scalingo.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SCMRepoLinkManualDeploy", arg0, arg1, arg2)
	ret0, _ := ret[0].(*scalingo.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SCMRepoLinkManualDeploy indicates an expected call of SCMRepoLinkManualDeploy.
func (mr *MockSCMRepoLinkServiceMockRecorder) SCMRepoLinkManualDeploy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SCMRepoLinkManualDeploy", reflect.TypeOf((*MockSCMRepoLinkService)(nil).SCMRepoLinkManualDeploy), arg0, arg1, arg2)
}

// SCMRepoLinkManualReviewApp mocks base method.
func (m *MockSCMRepoLinkService) SCMRepoLinkManualReviewApp(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SCMRepoLinkManualReviewApp", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SCMRepoLinkManualReviewApp indicates an expected call of SCMRepoLinkManualReviewApp.
func (mr *MockSCMRepoLinkServiceMockRecorder) SCMRepoLinkManualReviewApp(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SCMRepoLinkManualReviewApp", reflect.TypeOf((*MockSCMRepoLinkService)(nil).SCMRepoLinkManualReviewApp), arg0, arg1, arg2)
}

// SCMRepoLinkPullRequest mocks base method.
func (m *MockSCMRepoLinkService) SCMRepoLinkPullRequest(arg0 context.Context, arg1 string, arg2 int) (*scalingo.RepoLinkPullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SCMRepoLinkPullRequest", arg0, arg1, arg2)
	ret0, _ := ret[0].(*scalingo.RepoLinkPullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SCMRepoLinkPullRequest indicates an expected call of SCMRepoLinkPullRequest.
func (mr *MockSCMRepoLinkServiceMockRecorder) SCMRepoLinkPullRequest(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SCMRepoLinkPullRequest", reflect.TypeOf((*MockSCMRepoLinkService)(nil).SCMRepoLinkPullRequest), arg0, arg1, arg2)
}

// SCMRepoLinkReviewApps mocks base method.
func (m *MockSCMRepoLinkService) SCMRepoLinkReviewApps(arg0 context.Context, arg1 string) ([]*scalingo.ReviewApp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SCMRepoLinkReviewApps", arg0, arg1)
	ret0, _ := ret[0].([]*scalingo.ReviewApp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SCMRepoLinkReviewApps indicates an expected call of SCMRepoLinkReviewApps.
func (mr *MockSCMRepoLinkServiceMockRecorder) SCMRepoLinkReviewApps(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SCMRepoLinkReviewApps", reflect.TypeOf((*MockSCMRepoLinkService)(nil).SCMRepoLinkReviewApps), arg0, arg1)
}

// SCMRepoLinkShow mocks base method.
func (m *MockSCMRepoLinkService) SCMRepoLinkShow(arg0 context.Context, arg1 string) (*scalingo.SCMRepoLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SCMRepoLinkShow", arg0, arg1)
	ret0, _ := ret[0].(*scalingo.SCMRepoLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SCMRepoLinkShow indicates an expected call of SCMRepoLinkShow.
func (mr *MockSCMRepoLinkServiceMockRecorder) SCMRepoLinkShow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SCMRepoLinkShow", reflect.TypeOf((*MockSCMRepoLinkService)(nil).SCMRepoLinkShow), arg0, arg1)
}

// SCMRepoLinkUpdate mocks base method.
func (m *MockSCMRepoLinkService) SCMRepoLinkUpdate(arg0 context.Context, arg1 string, arg2 scalingo.SCMRepoLinkUpdateParams) (*scalingo.SCMRepoLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SCMRepoLinkUpdate", arg0, arg1, arg2)
	ret0, _ := ret[0].(*scalingo.SCMRepoLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SCMRepoLinkUpdate indicates an expected call of SCMRepoLinkUpdate.
func (mr *MockSCMRepoLinkServiceMockRecorder) SCMRepoLinkUpdate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SCMRepoLinkUpdate", reflect.TypeOf((*MockSCMRepoLinkService)(nil).SCMRepoLinkUpdate), arg0, arg1, arg2)
}
